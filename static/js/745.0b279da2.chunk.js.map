{"version":3,"file":"static/js/745.0b279da2.chunk.js","mappings":"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","sources":["views/LoginView.js","../node_modules/@chakra-ui/form-control/src/form-label.tsx","../node_modules/@chakra-ui/form-control/src/form-control.tsx","../node_modules/@chakra-ui/form-control/src/use-form-control.ts","../node_modules/@chakra-ui/input/src/input.tsx","../node_modules/@chakra-ui/layout/src/container.tsx","../node_modules/@chakra-ui/layout/src/heading.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport {\n  Box,\n  Button,\n  Input,\n  FormControl,\n  FormLabel,\n  Heading,\n  Container,\n} from '@chakra-ui/react';\nimport { useDispatch } from 'react-redux';\nimport { authOperations } from '../redux/auth';\nimport Notiflix from 'notiflix';\n\nconst LoginView = () => {\n  const dispatch = useDispatch();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      await dispatch(authOperations.logIn({ email, password }));\n      setEmail('');\n      setPassword('');\n    } catch (error) {\n      Notiflix.Notify.failure(' Failed to log in: ' + error);\n    }\n  };\n\n  return (\n    <Box\n      minHeight=\"100vh\"\n      display=\"flex\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      bgGradient=\"linear(to bottom, #f6f6f6, #ffffff)\"\n    >\n      <Container p={8} maxW=\"400px\" bg=\"white\" boxShadow=\"md\" borderRadius=\"lg\">\n        <Heading as=\"h1\" size=\"xl\" mb={6} textAlign=\"center\">\n          Log in{' '}\n        </Heading>\n\n        <Box as=\"form\" onSubmit={handleSubmit}>\n          <FormControl mb={3}>\n            <FormLabel>Email</FormLabel>\n            <Input\n              type=\"email\"\n              name=\"email\"\n              value={email}\n              onChange={e => setEmail(e.target.value)}\n              required\n              borderColor=\"gray.400\"\n            />\n          </FormControl>\n\n          <FormControl mb={3}>\n            <FormLabel>Password</FormLabel>\n            <Input\n              type=\"password\"\n              name=\"password\"\n              value={password}\n              onChange={e => setPassword(e.target.value)}\n              required\n              borderColor=\"gray.400\"\n            />\n          </FormControl>\n\n          <Button type=\"submit\" colorScheme=\"teal\" width=\"full\">\n            Submit\n          </Button>\n        </Box>\n      </Container>\n    </Box>\n  );\n};\n\nexport default LoginView;\n","import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useFormControlContext, useFormControlStyles } from \"./form-control\"\n\nexport interface FormLabelProps\n  extends HTMLChakraProps<\"label\">,\n    ThemingProps<\"FormLabel\"> {\n  /**\n   * @type React.ReactElement\n   */\n  requiredIndicator?: React.ReactElement\n  /**\n   * @type React.ReactNode\n   */\n  optionalIndicator?: React.ReactNode\n}\n\n/**\n * Used to enhance the usability of form controls.\n *\n * It is used to inform users as to what information\n * is requested for a form field.\n *\n * ♿️ Accessibility: Every form field should have a form label.\n */\nexport const FormLabel = forwardRef<FormLabelProps, \"label\">(function FormLabel(\n  passedProps,\n  ref,\n) {\n  const styles = useStyleConfig(\"FormLabel\", passedProps)\n  const props = omitThemingProps(passedProps)\n\n  const {\n    className,\n    children,\n    requiredIndicator = <RequiredIndicator />,\n    optionalIndicator = null,\n    ...rest\n  } = props\n\n  const field = useFormControlContext()\n  const ownProps = field?.getLabelProps(rest, ref) ?? { ref, ...rest }\n\n  return (\n    <chakra.label\n      {...ownProps}\n      className={cx(\"chakra-form__label\", props.className)}\n      __css={{\n        display: \"block\",\n        textAlign: \"start\",\n        ...styles,\n      }}\n    >\n      {children}\n      {field?.isRequired ? requiredIndicator : optionalIndicator}\n    </chakra.label>\n  )\n})\n\nFormLabel.displayName = \"FormLabel\"\n\nexport interface RequiredIndicatorProps extends HTMLChakraProps<\"span\"> {}\n\n/**\n * Used to show a \"required\" text or an asterisks (*) to indicate that\n * a field is required.\n */\nexport const RequiredIndicator = forwardRef<RequiredIndicatorProps, \"span\">(\n  function RequiredIndicator(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n\n    if (!field?.isRequired) return null\n\n    const className = cx(\"chakra-form__required-indicator\", props.className)\n\n    return (\n      <chakra.span\n        {...field?.getRequiredIndicatorProps(props, ref)}\n        __css={styles.requiredIndicator}\n        className={className}\n      />\n    )\n  },\n)\n\nRequiredIndicator.displayName = \"RequiredIndicator\"\n","import { createContext } from \"@chakra-ui/react-context\"\nimport { PropGetter } from \"@chakra-ui/react-types\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr } from \"@chakra-ui/shared-utils\"\nimport { useCallback, useId, useState } from \"react\"\n\nconst [FormControlStylesProvider, useFormControlStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `FormControlStylesContext`,\n  errorMessage: `useFormControlStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<FormControl />\" `,\n})\n\nexport { useFormControlContext, useFormControlStyles }\n\nexport interface FormControlOptions {\n  /**\n   * If `true`, the form control will be required. This has 2 side effects:\n   * - The `FormLabel` will show a required indicator\n   * - The form element (e.g, Input) will have `aria-required` set to `true`\n   *\n   * @default false\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the form control will be disabled. This has 2 side effects:\n   * - The `FormLabel` will have `data-disabled` attribute\n   * - The form element (e.g, Input) will be disabled\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the form control will be invalid. This has 2 side effects:\n   * - The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n   * - The form element (e.g, Input) will have `aria-invalid` set to `true`\n   *\n   * @default false\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the form control will be readonly\n   *\n   * @default false\n   */\n  isReadOnly?: boolean\n}\n\ninterface FormControlContext extends FormControlOptions {\n  /**\n   * The label text used to inform users as to what information is\n   * requested for a text field.\n   */\n  label?: string\n  /**\n   * The custom `id` to use for the form control. This is passed directly to the form element (e.g, Input).\n   * - The form element (e.g. Input) gets the `id`\n   * - The form label id: `form-label-${id}`\n   * - The form error text id: `form-error-text-${id}`\n   * - The form helper text id: `form-helper-text-${id}`\n   */\n  id?: string\n}\n\ntype FormControlProviderContext = Omit<\n  ReturnType<typeof useFormControlProvider>,\n  \"getRootProps\" | \"htmlProps\"\n>\n\nconst [FormControlProvider, useFormControlContext] =\n  createContext<FormControlProviderContext>({\n    strict: false,\n    name: \"FormControlContext\",\n  })\n\nfunction useFormControlProvider(props: FormControlContext) {\n  const {\n    id: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isReadOnly,\n    ...htmlProps\n  } = props\n\n  // Generate all the required ids\n  const uuid = useId()\n  const id = idProp || `field-${uuid}`\n\n  const labelId = `${id}-label`\n  const feedbackId = `${id}-feedback`\n  const helpTextId = `${id}-helptext`\n\n  /**\n   * Track whether the `FormErrorMessage` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasFeedbackText, setHasFeedbackText] = useState(false)\n\n  /**\n   * Track whether the `FormHelperText` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasHelpText, setHasHelpText] = useState(false)\n\n  // Track whether the form element (e.g, `input`) has focus.\n  const [isFocused, setFocus] = useState(false)\n\n  const getHelpTextProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: helpTextId,\n      ...props,\n      /**\n       * Notify the field context when the help text is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasHelpText(true)\n      }),\n    }),\n    [helpTextId],\n  )\n\n  const getLabelProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      id: props.id !== undefined ? props.id : labelId,\n      htmlFor: props.htmlFor !== undefined ? props.htmlFor : id,\n    }),\n    [id, isDisabled, isFocused, isInvalid, isReadOnly, labelId],\n  )\n\n  const getErrorMessageProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: feedbackId,\n      ...props,\n      /**\n       * Notify the field context when the error message is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasFeedbackText(true)\n      }),\n      \"aria-live\": \"polite\",\n    }),\n    [feedbackId],\n  )\n\n  const getRootProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ...htmlProps,\n      ref: forwardedRef,\n      role: \"group\",\n    }),\n    [htmlProps],\n  )\n\n  const getRequiredIndicatorProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      role: \"presentation\",\n      \"aria-hidden\": true,\n      children: props.children || \"*\",\n    }),\n    [],\n  )\n\n  return {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    isFocused: !!isFocused,\n    onFocus: () => setFocus(true),\n    onBlur: () => setFocus(false),\n    hasFeedbackText,\n    setHasFeedbackText,\n    hasHelpText,\n    setHasHelpText,\n    id,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps,\n    getHelpTextProps,\n    getErrorMessageProps,\n    getRootProps,\n    getLabelProps,\n    getRequiredIndicatorProps,\n  }\n}\n\nexport interface FormControlProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"FormControl\">,\n    FormControlContext {}\n\n/**\n * FormControl provides context such as\n * `isInvalid`, `isDisabled`, and `isRequired` to form elements.\n *\n * This is commonly used in form elements such as `input`,\n * `select`, `textarea`, etc.\n *\n * @see Docs https://chakra-ui.com/docs/components/form-control\n */\nexport const FormControl = forwardRef<FormControlProps, \"div\">(\n  function FormControl(props, ref) {\n    const styles = useMultiStyleConfig(\"Form\", props)\n    const ownProps = omitThemingProps(props)\n    const {\n      getRootProps,\n      htmlProps: _,\n      ...context\n    } = useFormControlProvider(ownProps)\n\n    const className = cx(\"chakra-form-control\", props.className)\n\n    return (\n      <FormControlProvider value={context}>\n        <FormControlStylesProvider value={styles}>\n          <chakra.div\n            {...getRootProps({}, ref)}\n            className={className}\n            __css={styles[\"container\"]}\n          />\n        </FormControlStylesProvider>\n      </FormControlProvider>\n    )\n  },\n)\n\nFormControl.displayName = \"FormControl\"\n\nexport interface FormHelperTextProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * FormHelperText\n *\n * Assistive component that conveys additional guidance\n * about the field, such as how it will be used and what\n * types in values should be provided.\n */\nexport const FormHelperText = forwardRef<FormHelperTextProps, \"div\">(\n  function FormHelperText(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n    const className = cx(\"chakra-form__helper-text\", props.className)\n    return (\n      <chakra.div\n        {...field?.getHelpTextProps(props, ref)}\n        __css={styles.helperText}\n        className={className}\n      />\n    )\n  },\n)\n\nFormHelperText.displayName = \"FormHelperText\"\n","import { ariaAttr, callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport { FormControlOptions, useFormControlContext } from \"./form-control\"\n\nexport interface UseFormControlProps<T extends HTMLElement>\n  extends FormControlOptions {\n  id?: string\n  onFocus?: React.FocusEventHandler<T>\n  onBlur?: React.FocusEventHandler<T>\n  disabled?: boolean\n  readOnly?: boolean\n  required?: boolean\n  \"aria-describedby\"?: string\n}\n\n/**\n * React hook that provides the props that should be spread on to\n * input fields (`input`, `select`, `textarea`, etc.).\n *\n * It provides a convenient way to control a form fields, validation\n * and helper text.\n *\n * @internal\n */\nexport function useFormControl<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const { isDisabled, isInvalid, isReadOnly, isRequired, ...rest } =\n    useFormControlProps(props)\n\n  return {\n    ...rest,\n    disabled: isDisabled,\n    readOnly: isReadOnly,\n    required: isRequired,\n    \"aria-invalid\": ariaAttr(isInvalid),\n    \"aria-required\": ariaAttr(isRequired),\n    \"aria-readonly\": ariaAttr(isReadOnly),\n  }\n}\n\n/**\n * @internal\n */\nexport function useFormControlProps<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const field = useFormControlContext()\n\n  const {\n    id,\n    disabled,\n    readOnly,\n    required,\n    isRequired,\n    isInvalid,\n    isReadOnly,\n    isDisabled,\n    onFocus,\n    onBlur,\n    ...rest\n  } = props\n\n  const labelIds: string[] = props[\"aria-describedby\"]\n    ? [props[\"aria-describedby\"]]\n    : []\n\n  // Error message must be described first in all scenarios.\n  if (field?.hasFeedbackText && field?.isInvalid) {\n    labelIds.push(field.feedbackId)\n  }\n\n  if (field?.hasHelpText) {\n    labelIds.push(field.helpTextId)\n  }\n\n  return {\n    ...rest,\n    \"aria-describedby\": labelIds.join(\" \") || undefined,\n    id: id ?? field?.id,\n    isDisabled: disabled ?? isDisabled ?? field?.isDisabled,\n    isReadOnly: readOnly ?? isReadOnly ?? field?.isReadOnly,\n    isRequired: required ?? isRequired ?? field?.isRequired,\n    isInvalid: isInvalid ?? field?.isInvalid,\n    onFocus: callAllHandlers(field?.onFocus, onFocus),\n    onBlur: callAllHandlers(field?.onBlur, onBlur),\n  }\n}\n","import { FormControlOptions, useFormControl } from \"@chakra-ui/form-control\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\ninterface InputOptions {\n  /**\n   * The border color when the input is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the input is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n  /**\n   * The native HTML `size` attribute to be passed to the `input`\n   */\n  htmlSize?: number\n}\n\ntype Omitted = \"disabled\" | \"required\" | \"readOnly\" | \"size\"\n\nexport interface InputProps\n  extends Omit<HTMLChakraProps<\"input\">, Omitted>,\n    InputOptions,\n    ThemingProps<\"Input\">,\n    FormControlOptions {}\n\n/**\n * Input\n *\n * Element that allows users enter single valued data.\n *\n * @see Docs https://chakra-ui.com/docs/components/input\n */\nexport const Input = forwardRef<InputProps, \"input\">(function Input(\n  props,\n  ref,\n) {\n  const { htmlSize, ...rest } = props\n\n  const styles = useMultiStyleConfig(\"Input\", rest)\n  const ownProps = omitThemingProps(rest)\n  const input = useFormControl<HTMLInputElement>(ownProps)\n  const _className = cx(\"chakra-input\", props.className)\n\n  return (\n    <chakra.input\n      size={htmlSize}\n      {...input}\n      __css={styles.field}\n      ref={ref}\n      className={_className}\n    />\n  )\n})\n\nInput.displayName = \"Input\"\n\n// This is used in `input-group.tsx`\nInput.id = \"Input\"\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\nexport interface ContainerProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"Container\"> {\n  /**\n   * If `true`, container will center its children\n   * regardless of their width.\n   *\n   * @default false\n   */\n  centerContent?: boolean\n}\n\n/**\n * Layout component used to wrap app or website content\n *\n * It sets `margin-left` and `margin-right` to `auto`,\n * to keep its content centered.\n *\n * It also sets a default max-width of `60ch` (60 characters).\n *\n * @see Docs https://chakra-ui.com/docs/components/container\n */\nexport const Container = forwardRef<ContainerProps, \"div\">(function Container(\n  props,\n  ref,\n) {\n  const { className, centerContent, ...rest } = omitThemingProps(props)\n\n  const styles = useStyleConfig(\"Container\", props)\n\n  return (\n    <chakra.div\n      ref={ref}\n      className={cx(\"chakra-container\", className)}\n      {...rest}\n      __css={{\n        ...styles,\n        ...(centerContent && {\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n        }),\n      }}\n    />\n  )\n})\n\nContainer.displayName = \"Container\"\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\nexport interface HeadingProps\n  extends HTMLChakraProps<\"h2\">,\n    ThemingProps<\"Heading\"> {}\n\n/**\n * `Heading` is used to render semantic HTML heading elements.\n *\n * By default, renders as `h2` with themantic size `xl`\n *\n * @see Docs https://chakra-ui.com/docs/components/heading\n */\nexport const Heading = forwardRef<HeadingProps, \"h2\">(function Heading(\n  props,\n  ref,\n) {\n  const styles = useStyleConfig(\"Heading\", props)\n  const { className, ...rest } = omitThemingProps(props)\n\n  return (\n    <chakra.h2\n      ref={ref}\n      className={cx(\"chakra-heading\", props.className)}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nHeading.displayName = \"Heading\"\n"],"names":["dispatch","useDispatch","useState","email","setEmail","password","setPassword","handleSubmit","e","preventDefault","authOperations","Notiflix","minHeight","display","alignItems","justifyContent","bgGradient","p","maxW","bg","boxShadow","borderRadius","as","size","mb","textAlign","onSubmit","I","type","name","value","onChange","target","required","borderColor","colorScheme","width","styles","useStyleConfig","className","children","requiredIndicator","RequiredIndicator","jsxs","optionalIndicator","cx","field","rest","useFormControlContext","passedProps","ownProps","_a","getLabelProps","label","chakra","__css","ref","omitThemingProps","FormLabel","isRequired","displayName","useFormControlStyles","span","getRequiredIndicatorProps","forwardRef","createContext","errorMessage","FormControlStylesProvider","strict","FormControlProvider","useFormControlProvider","idProp","context","useMultiStyleConfig","id","isInvalid","isDisabled","isReadOnly","htmlProps","uuid","labelId","useId","feedbackId","helpTextId","hasFeedbackText","setHasFeedbackText","hasHelpText","setHasHelpText","isFocused","setFocus","getHelpTextProps","forwardedRef","useCallback","node","mergeRefs","htmlFor","getErrorMessageProps","dataAttr","getRootProps","role","onFocus","onBlur","FormControl","props","div","helperText","useFormControlProps","ariaAttr","labelIds","readOnly","push","disabled","join","_b","_c","useFormControl","callAllHandlers","htmlSize","input","Input","centerContent","Container","flexDirection","h2","Heading"],"sourceRoot":""}